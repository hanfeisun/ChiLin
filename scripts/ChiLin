#!/usr/bin/env python
"""
Main program of DC pipeline
"""
import sys
import argparse

from functools import partial


from chilin.model import (gen_conf,
                          PipePreparation)

from chilin.dc import (PipeGroom,
                       PipeBowtie,
                       PipeMACS2,
                       PipeVennCor,
                       PipeCEAS,
                       PipeConserv,
                       PipeMotif,
                       package)

from chilin.qc import (RawQC,
                       MappingQC,
                       PeakcallingQC,
                       AnnotationQC,
                       SummaryQC)

class ChiLinParser(argparse.ArgumentParser):
    def error(self, message):
        sys.stderr.write('error: %s\n' % message)
        self.print_help()
        sys.exit()

def parse_args():
    description = "ChiLin : A clear ChIP-seq pipeline"
    parser = ChiLinParser(description = description)
    sub_parsers = parser.add_subparsers(help = "sub-command help", dest = "sub_command")

    # TODO, improve test system, testing in different treat, control combination
    test_parser = sub_parsers.add_parser("test",  help = "test ChiLin using test data and config",
                                         description = " A simple test on ChiLin installation ")
    test_parser.add_argument("-s", "--species", choices = ("hg19", "mm9"), required= True)
    test_parser.add_argument("-t", "--TF", default=False, help="TF test or Histone test")

    template_parser = sub_parsers.add_parser("gen",  help = "generate a template of config file",
                                             description = "ChiLin-gen: A config template generator for ChiLin")
    template_parser.add_argument("-s","--species", choices = ("hg19", "mm9"), required = True)

    # Run
    pipe_parser = sub_parsers.add_parser("run", help = "run pipeline using a config file",
                                         description = "ChiLin-run: Run ChiLin pipeline using a config file")
    pipe_parser.add_argument("-c","--config", required = True,
                        help = "specify the config file to use", )
    pipe_parser.add_argument("-t", dest = "atype", choices = ("Dnase", "Histone", "TF"), required = True,
                        help = "the most important option for ChiLin specify the analysis type and the shiftsize {Dnase: 50, Histone and TF:73} of MACS2")
    pipe_parser.add_argument("-m", dest = "cor_method", default = "mean",choices = ("mean",),
                        help = "specify method for correlation plot")
    pipe_parser.add_argument("-p", dest = "top_peaks", type = int, default = 5000,
                        help = "specify peaks number for CEAS")
    pipe_parser.add_argument("--threads", dest = "max_threads", type = int, default = 1, choices = range(1,9),
                             help = "How many threads can be used")
    pipe_parser.add_argument("-k", "--skip", dest="onlyqc", action="store_true", default=False,
                             help="skip dc part")
    pipe_parser.add_argument("-z", "--dc", dest="onlydc", action="store_true", default=False,
                             help="skip qc part")
    pipe_parser.add_argument("-a", "--absolid", dest="color", action="store_true", default=False,
                             help="For special absolid color fastq")
    pipe_parser.add_argument("-d", dest = "step_end", type = int, default = 6,
                             help = "specify the end step of pipeline, 1 for bowtie, 2 for macs, 3 for venn and correlation, 4 for ceas, 5 for conservation, 6 for motif, Note: if you only have bed file, start from 2")
    pipe_parser.add_argument("--debug", help = "debug mode", action = "store_true", default = False)
    
    args = parser.parse_args()

    if args.sub_command == "gen":
        gen_conf(args.species)
        sys.exit(0)

    if args.sub_command == "run":
        shift = {"TF": 73, "Histone": 73, "Dnase": 50}
        args.shiftsize = shift[args.atype]
    return args

def main():
    args = parse_args()
    pp = PipePreparation(args.config)
    cf = pp.get_config()
    rl = pp.get_rule()
    log_func = pp.log

    p = lambda func:partial(func, conf=cf, rule=rl, log=log_func, debug=args.debug,
                            texfile=pp.get_tex(),
                            datasummary = pp.get_summary(),
                            stepcontrol=args.step_end,
                            a_type = args.atype,
                            shiftsize = args.shiftsize,
                            peaksnumber = args.top_peaks,
                            ArgsionMethod = args.cor_method,
                            threads = args.max_threads)
    if not args.onlyqc:
        groom = p(PipeGroom)()
        groom.run()
    if not args.onlydc:
        rawqc = p(RawQC)()
        rawqc.run()
    if not args.onlyqc:
        # TODO insert into dc module
        bowtie = p(PipeBowtie)(color=args.color)
        bowtie.run()
    if not args.onlydc:
        mappingqc = p(MappingQC)(summarycheck = rawqc.summarycheck,summaryRender = rawqc.summaryRender )
        mappingqc.run()
    if not args.onlyqc:
        macs2 = p(PipeMACS2)()
        macs2.run()

        pipevenncor = p(PipeVennCor)(ratios = macs2.rendercontent)
        pipevenncor.run()

    if not args.onlydc:
        peakcallingqc = p(PeakcallingQC)(summarycheck = mappingqc.summarycheck)
        peakcallingqc.run()
        
    pipeceas = p(PipeCEAS)()
    pipeceas.run()

    pipeconserv = p(PipeConserv)()
    pipeconserv.run()

    pipemotif = p(PipeMotif)()
    pipemotif.run()
    if not args.onlydc:
        peakcallingqc = p(PeakcallingQC)(summarycheck = mappingqc.summarycheck,summaryRender = mappingqc.summaryRender)
        peakcallingqc.run()

        annotationqc = p(AnnotationQC)(summarycheck = peakcallingqc.summarycheck,summaryRender = peakcallingqc.summaryRender)
        annotationqc.run(args.atype)

        summaryqc = p(SummaryQC)()
        summaryqc.run(annotationqc.summarycheck,annotationqc.summaryRender,args.onlyqc)

    p(package)()

if __name__ == "__main__":
    try: 
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interupt~Bye")
        sys.exit(0)
